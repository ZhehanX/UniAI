<template>
    <div v-if="userRole === 'admin'" class="min-h-screen bg-gray-100">
        <header class="bg-white shadow">
            <div class="container mx-auto px-6 py-4 flex items-center justify-between">
                <h1 class="text-2xl font-bold text-gray-900">Admin Review Panel</h1>
            </div>
        </header>

        <main class="container mx-auto px-6 py-8">
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold mb-6">Cases Requiring Validation</h2>

                <!-- Loading/error states remain same -->

                <div v-if="cases.length" class="space-y-6">
                    <div v-for="caseItem in cases" :key="caseItem.id"
                        class="border rounded-lg p-6 hover:shadow-sm transition-all">
                        <!-- Header Section -->
                        <div class="flex flex-wrap items-start justify-between gap-4 mb-6">
                            <div class="space-y-2 flex-1 min-w-[300px]">
                                <div class="flex items-center gap-3">
                                    <h3 class="text-lg font-semibold text-gray-900">
                                        {{ caseItem.title }}
                                    </h3>
                                    <span :class="statusBadge(caseItem.status)" class="text-sm">
                                        {{ caseItem.status }}
                                    </span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    <div class="flex items-baseline gap-2">
                                        <template v-if="caseItem.institution_id">
                                            <span class="font-medium">Institution ID:</span>
                                            {{ caseItem.institution_id }}
                                        </template>
                                        <span v-else class="text-gray-400">No institution</span>
                                        <span class="mx-2">â€¢</span>
                                        <span>{{ caseItem.project_initiation_date }}</span>
                                    </div>
                                </div>
                            </div>

                            <div class="flex gap-3">
                                <button @click="openEditModal(caseItem)"
                                    class="text-blue-600 hover:text-blue-800 flex items-center gap-1">
                                    <PencilIcon class="w-5 h-5" />
                                    <span class="text-sm">Edit</span>
                                </button>
                            </div>
                        </div>

                        <!-- Main Content Grid -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 text-sm">
                            <!-- Left Column -->
                            <div class="space-y-4">
                                <div>
                                    <label class="text-gray-500 font-medium block mb-1">Institution</label>
                                    
                                </div>
                                <div>   
                                    <label class="text-gray-500 font-medium block mb-1">Contact</label>
                                    <a :href="`mailto:${caseItem.contact}`"
                                        class="text-blue-600 hover:underline break-all">
                                        {{ caseItem.contact }}
                                    </a>
                                </div>

                                <div>
                                    <label class="text-gray-500 font-medium block mb-1">Project URL</label>
                                    <a :href="caseItem.url" target="_blank"
                                        class="text-blue-600 hover:underline break-all">
                                        {{ caseItem.url || 'Not provided' }}
                                    </a>
                                </div>

                                <div>
                                    <label class="text-gray-500 font-medium block mb-1">AI Technologies</label>
                                    <div v-if="caseItem.ai_technologies.length" class="flex flex-wrap gap-2">
                                        <span v-for="(tech, index) in caseItem.ai_technologies" :key="index"
                                            class="px-2.5 py-1 bg-blue-50 text-blue-800 rounded-full text-xs">
                                            {{ tech }}
                                        </span>
                                    </div>
                                    <span v-else class="text-gray-400">None specified</span>
                                </div>
                            </div>

                            <!-- Right Column -->
                            <div class="space-y-4">
                                <div>
                                    <label class="text-gray-500 font-medium block mb-1">Short Description</label>
                                    <p class="text-gray-800 whitespace-pre-wrap leading-relaxed">
                                        {{ caseItem.short_description }}
                                    </p>
                                </div>

                                <div>
                                    <label class="text-gray-500 font-medium block mb-1">Full Description</label>
                                    <p
                                        class="text-gray-800 whitespace-pre-wrap leading-relaxed max-h-[200px] overflow-y-auto">
                                        {{ caseItem.full_description?.value || 'No description provided' }}
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Action Footer -->
                        <div class="mt-6 pt-4 border-t flex flex-wrap gap-4 justify-end">
                            <button @click="rejectCase(caseItem.id)"
                                class="px-4 py-2 text-red-700 bg-red-50 hover:bg-red-100 rounded-md flex items-center gap-2">
                                <XMarkIcon class="w-5 h-5" />
                                <span>Reject Case</span>
                            </button>
                            <button @click="approveCase(caseItem.id)"
                                class="px-4 py-2 text-green-700 bg-green-50 hover:bg-green-100 rounded-md flex items-center gap-2">
                                <CheckIcon class="w-5 h-5" />
                                <span>Approve Case</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div v-if="!cases.length && !loading" class="text-center text-gray-500 py-4">
                    No cases requiring validation
                </div>
            </div>
        </main>
    </div>

    <div v-else class="text-center mt-8 text-red-600">
        You don't have permission to access this page
    </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRouter } from 'vue-router';
import { getUserRole } from '@/utils/auth.js';

const router = useRouter();
const userRole = getUserRole();
const cases = ref([]);
const loading = ref(false);
const errorMessage = ref('');
const successMessage = ref('');

// Fetch pending cases
const fetchCases = async () => {
    try {
        loading.value = true;
        const token = localStorage.getItem('authToken');
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/use-cases/?status=pending`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) throw new Error('Failed to fetch cases');
        cases.value = await response.json();
        console.log(cases.value)
    } catch (error) {
        errorMessage.value = 'Error loading cases';
    } finally {
        loading.value = false;
    }
};

// Approve case
const approveCase = async (caseId) => {
    try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/use-cases/${caseId}/approve/`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) throw new Error('Approval failed');
        successMessage.value = 'Case approved successfully';
        await fetchCases();
    } catch (error) {
        errorMessage.value = 'Approval failed. Please try again.';
    }
};

// Reject case
const rejectCase = async (caseId) => {
    try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/use-cases/${caseId}/reject/`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) throw new Error('Rejection failed');
        successMessage.value = 'Case rejected successfully';
        await fetchCases();
    } catch (error) {
        errorMessage.value = 'Rejection failed. Please try again.';
    }
};

onMounted(() => {
    if (userRole === 'admin') {
        fetchCases();
    } else {
        router.push('/');
    }
});


// Status badge styling
const statusBadge = (status) => ({
    'px-3 py-1 rounded-full text-sm font-medium': true,
    'bg-amber-100 text-amber-800': status === 'pending',
    'bg-emerald-100 text-emerald-800': status === 'approved',
    'bg-rose-100 text-rose-800': status === 'rejected'
});



const fetchInstitutionDetails = async (institutionId) => {
    try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(
            `${import.meta.env.VITE_API_URL}/api/institutions/${institutionId}/`,
            {
                headers: { 'Authorization': `Bearer ${token}` }
            }
        );

        if (!response.ok) throw new Error('Institution not found');
        const data = await response.json();

        return data;
    } catch (error) {
        errorMessage.value = 'Could not fetch institution details';
    }
};


</script>
