"""Initial migration

Revision ID: ca84e52c5d1d
Revises: 
Create Date: 2025-03-11 17:32:26.457583

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ca84e52c5d1d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_technology',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_ai_technology_id'), 'ai_technology', ['id'], unique=False)
    op.create_table('institutions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_institutions_id'), 'institutions', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('use_case_ai_technology',
    sa.Column('use_case_id', sa.Integer(), nullable=False),
    sa.Column('ai_technology_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ai_technology_id'], ['ai_technology.id'], ),
    sa.ForeignKeyConstraint(['use_case_id'], ['use_cases.id'], ),
    sa.PrimaryKeyConstraint('use_case_id', 'ai_technology_id')
    )
    op.add_column('use_cases', sa.Column('logo_filename', sa.String(), nullable=True))
    op.add_column('use_cases', sa.Column(
        'status', 
        sa.String(), 
        nullable=False,
        server_default='pending'
    ))
    op.add_column('use_cases', sa.Column('date_created', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=False))
    op.add_column('use_cases', sa.Column('project_initiation_date', sa.Date(), nullable=True))
    # Create a default institution first
    op.execute("""
        INSERT INTO institutions (name, address)
        VALUES ('Default Institution', 'Unknown Address')
    """)
    
    # Create a default user
    op.execute("""
        INSERT INTO users (username, email, hashed_password, role)
        VALUES ('admin', 'admin@example.com', 'placeholder', 'admin')
    """)
    op.add_column('use_cases', sa.Column('institution_id', sa.Integer(), nullable=True))
    op.add_column('use_cases', sa.Column('submitted_by', sa.Integer(), nullable=True))
    
    # Set default values for existing records
    op.execute("""
        UPDATE use_cases 
        SET institution_id = (SELECT id FROM institutions WHERE name = 'Default Institution')
    """)
    
    op.execute("""
        UPDATE use_cases 
        SET submitted_by = (SELECT id FROM users WHERE username = 'admin')
    """)
    
    # Now alter columns to be non-nullable
    op.alter_column('use_cases', 'institution_id', nullable=False)
    op.alter_column('use_cases', 'submitted_by', nullable=False)
    # Convert existing data to JSON with proper escaping
    op.execute("""
        UPDATE use_cases 
        SET full_description = 
            CASE 
                WHEN full_description IS NULL THEN '{"value": null}'::jsonb
                ELSE jsonb_build_object('value', full_description)
            END
    """)
    
    # Alter column type after conversion
    op.alter_column('use_cases', 'full_description',
               existing_type=sa.VARCHAR(),
               type_=sa.JSON(),
               nullable=False,
               postgresql_using="full_description::jsonb")
    # Remove duplicate titles first
    op.execute("""
        UPDATE use_cases SET title = title || '_' || id 
        WHERE id NOT IN (
            SELECT MIN(id) 
            FROM use_cases 
            GROUP BY title
        )
    """)
    
    # Create named unique constraint
    op.create_unique_constraint('uq_use_cases_title', 'use_cases', ['title'])
    op.create_foreign_key(None, 'use_cases', 'institutions', ['institution_id'], ['id'])
    op.create_foreign_key(None, 'use_cases', 'users', ['submitted_by'], ['id'])
    op.drop_column('use_cases', 'ai_technologies')
    op.drop_column('use_cases', 'institution')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('use_cases', sa.Column('institution', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('use_cases', sa.Column('ai_technologies', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'use_cases', type_='foreignkey')
    op.drop_constraint(None, 'use_cases', type_='foreignkey')
    op.drop_constraint(None, 'use_cases', type_='unique')
    op.drop_constraint('uq_use_cases_title', 'use_cases', type_='unique')
    op.alter_column('use_cases', 'full_description',
               existing_type=sa.JSON(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.drop_column('use_cases', 'submitted_by')
    op.drop_column('use_cases', 'institution_id')
    op.drop_column('use_cases', 'project_initiation_date')
    op.drop_column('use_cases', 'date_created')
    op.drop_column('use_cases', 'status')
    op.drop_column('use_cases', 'logo_filename')
    op.drop_table('use_case_ai_technology')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_institutions_id'), table_name='institutions')
    op.drop_table('institutions')
    op.drop_index(op.f('ix_ai_technology_id'), table_name='ai_technology')
    op.drop_table('ai_technology')
    # ### end Alembic commands ###
